package ch.kleis.lcaplugin.psi

import com.intellij.psi.tree.IElementType

class LcaTokenTypes {
    companion object {
        val ALIAS_FOR_KEYWORD: IElementType = LcaTokenType("alias_for")
        val ALLOCATE_KEYWORD: IElementType = LcaTokenType("allocate")
        val COMMA: IElementType = LcaTokenType("comma")
        val COMMENT_BLOCK_END: IElementType = LcaTokenType("comment-block-end")
        val COMMENT_BLOCK_START: IElementType = LcaTokenType("comment-block-start")
        val COMMENT_CONTENT: IElementType = LcaTokenType("comment-content")
        val COMMENT_LINE: IElementType = LcaTokenType("comment-line")
        val COMPARTMENT_KEYWORD: IElementType = LcaTokenType("compartment")
        val DIMENSION_KEYWORD: IElementType = LcaTokenType("dimension")
        val DOT: IElementType = LcaTokenType("dot")
        val DOUBLE_QUOTE: IElementType = LcaTokenType("double-quote")
        val EMISSIONS_KEYWORD: IElementType = LcaTokenType("emissions")
        val EQUAL: IElementType = LcaTokenType("equal")
        val FROM_KEYWORD: IElementType = LcaTokenType("from")
        val HAT: IElementType = LcaTokenType("hat")
        val IDENTIFIER: IElementType = LcaTokenType("identifier")
        val IMPACTS_KEYWORD: IElementType = LcaTokenType("impacts")
        val IMPORT_KEYWORD: IElementType = LcaTokenType("import")
        val INDICATOR_KEYWORD: IElementType = LcaTokenType("indicator")
        val INPUTS_KEYWORD: IElementType = LcaTokenType("inputs")
        val LAND_USE_KEYWORD: IElementType = LcaTokenType("land_use")
        val LBRACE: IElementType = LcaTokenType("left-bracket")
        val LPAREN: IElementType = LcaTokenType("left-paren")
        val LSQBRACE: IElementType = LcaTokenType("left-sqbrace")
        val META_KEYWORD: IElementType = LcaTokenType("meta")
        val MINUS: IElementType = LcaTokenType("MINUS")
        val NAME_KEYWORD: IElementType = LcaTokenType("name")
        val NUMBER: IElementType = LcaTokenType("number")
        val PACKAGE_KEYWORD: IElementType = LcaTokenType("package")
        val PARAMETERS_KEYWORD: IElementType = LcaTokenType("parameters")
        val PLUS: IElementType = LcaTokenType("plus")
        val PROCESS_KEYWORD: IElementType = LcaTokenType("process")
        val PRODUCTS_KEYWORD: IElementType = LcaTokenType("products")
        val RBRACE: IElementType = LcaTokenType("right-bracket")
        val REFERENCE_UNIT_KEYWORD: IElementType = LcaTokenType("reference-unit")
        val RESOURCES_KEYWORD: IElementType = LcaTokenType("resources")
        val RPAREN: IElementType = LcaTokenType("right-paren")
        val RSQBRACE: IElementType = LcaTokenType("right-sqbrace")
        val SLASH: IElementType = LcaTokenType("slash")
        val STAR: IElementType = LcaTokenType("star")
        val STRING_LITERAL: IElementType = LcaTokenType("string-literal")
        val SUBSTANCE_KEYWORD: IElementType = LcaTokenType("substance")
        val SUB_COMPARTMENT_KEYWORD: IElementType = LcaTokenType("sub-compartment")
        val SYMBOL_KEYWORD: IElementType = LcaTokenType("symbol")
        val TYPE_EMISSION_KEYWORD: IElementType = LcaTokenType("Emission")
        val TYPE_KEYWORD: IElementType = LcaTokenType("type")
        val TYPE_LAND_USE_KEYWORD: IElementType = LcaTokenType("Land_use")
        val TYPE_RESOURCE_KEYWORD: IElementType = LcaTokenType("Resource")
        val UNIT_KEYWORD: IElementType = LcaTokenType("unit")
        val VARIABLES_KEYWORD: IElementType = LcaTokenType("variables")
    }
}
