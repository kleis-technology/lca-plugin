{
  parserClass="ch.kleis.lcaac.plugin.language.parser.LcaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lca"
  psiImplClassSuffix="Impl"
  psiPackage="ch.kleis.lcaac.plugin.psi"
  psiImplPackage="ch.kleis.lcaac.plugin.psi.impl"

  elementTypeHolderClass="ch.kleis.lcaac.plugin.psi.LcaTypes"
  elementTypeClass="ch.kleis.lcaac.plugin.psi.LcaElementType"
  tokenTypeClass="ch.kleis.lcaac.plugin.psi.LcaTokenType"

  tokens=[

      PACKAGE_KEYWORD = 'package'
      PROCESS_KEYWORD = 'process'
      SYMBOL_KEYWORD = 'symbol'
      SUBSTANCE_KEYWORD = 'substance'
      TYPE_KEYWORD = 'type'
      TYPE_EMISSION_KEYWORD = 'Emission'
      TYPE_RESOURCE_KEYWORD = 'Resource'
      TYPE_LAND_USE_KEYWORD = 'Land_use'
      COMPARTMENT_KEYWORD = 'compartment'
      SUB_COMPARTMENT_KEYWORD = 'sub_compartment'
      IMPACTS_KEYWORD = 'impacts'
      META_KEYWORD = "meta"
      FROM_KEYWORD = "from"
      PRODUCTS_KEYWORD = 'products'
      LAND_USE_KEYWORD = 'land_use'
      INDICATOR_KEYWORD = 'indicator'
      VARIABLES_KEYWORD = 'variables'
      UNIT_KEYWORD = 'unit'
      REFERENCE_UNIT_KEYWORD = 'reference_unit'
      ALIAS_FOR_KEYWORD = 'alias_for'
      ALLOCATE_KEYWORD = 'allocate'
      NAME_KEYWORD = 'name'
      DIMENSION_KEYWORD = 'dimension'
      PARAMETERS_KEYWORD = 'params'
      INPUTS_KEYWORD = 'inputs'
      EMISSIONS_KEYWORD = 'emissions'
      RESOURCES_KEYWORD = 'resources'
      LABELS_KEYWORD = 'labels'
      IMPORT_KEYWORD = 'import'
      IDENTIFIER = 'identifier'
      MATCH_KEYWORD = 'match'

      TEST_KEYWORD = 'test'
      GIVEN_KEYWORD = 'given'
      ASSERT_KEYWORD = 'assert'
      BETWEEN_KEYWORD = 'between'
      AND_KEYWORD = 'and'

      DATASOURCE_KEYWORD = 'datasource'
      LOCATION_KEYWORD = 'location'
      SCHEMA_KEYWORD = 'schema'
      FOR_EACH_KEYWORD = 'for_each'
      SUM_KEYWORD = 'sum'
      LOOKUP_KEYWORD = 'lookup'
      DEFAULT_RECORD_KEYWORD = 'default_record'

      LSQBRACE = '['
      RSQBRACE = ']'
      LPAREN = '('
      RPAREN = ')'
      LBRACE = '{'
      RBRACE = '}'
      COMMA = ','
      STRING_LITERAL = 'string-literal'
      SPACE = "regexp:\s+"
      COMMENT_BLOCK_START = 'comment-block-start'
      COMMENT_BLOCK_END = 'comment-block-end'
      COMMENT_CONTENT = 'comment-content'
      COMMENT_LINE = 'comment-line'
      NUMBER = 'regexp:-?[0-9]+(\.[0-9]+)?([eE][+-][0-9]+)?'
      IDENTIFIER =  'regexp:[a-zA-Z_]\w*'
      PLUS = "+"
      MINUS = "-"
      DOT = "."
      STAR = "*"
      SLASH = "/"
      HAT = "^"
      EQUAL = "="
      DOUBLE_QUOTE = '"'
  ]
}

/*
    LCA File
 */

lcaFile ::= package? import* (process | test | dataSourceDefinition | unitDefinition | substance | globalVariables )*

/*
    Package
 */

package ::= "package" urn {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.trait.PsiUrnOwner"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.trait.PsiUrnOwnerMixin"
}

import ::= "import" urn {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.trait.PsiUrnOwner"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.trait.PsiUrnOwnerMixin"
}

/*
    Data source
 */

dataSourceDefinition ::= 'datasource' dataSourceRef '{' (locationField | schemaDefinition)* '}' {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiDataSourceDefinition"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiDataSourceMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.datasource.DataSourceStubElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.datasource.DataSourceStub"
}
locationField ::= 'location' '=' STRING_LITERAL { methods=[value="STRING_LITERAL"] }
schemaDefinition ::= 'schema' '{' columnDefinition* '}'
columnDefinition ::= columnRef '=' dataExpression {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiColumnDefinition"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiColumnDefinitionMixin"
}

/*
    Global variables
 */

globalVariables ::= "variables" '{' globalAssignment* '}'
globalAssignment ::= dataRef '=' dataExpression {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiGlobalAssignment"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiGlobalAssignmentMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.global_assignment.GlobalAssignmentStubElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.global_assignment.GlobalAssignmentStub"
}

/*
    Test
 */

test ::= 'test' testRef '{'
    (given | assert | variables)*
'}' {
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiTestMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.test.TestElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.test.TestStub"
}
given ::= 'given' '{' technoInputExchange *'}'
assert ::= 'assert' '{' rangeAssertion* '}'
rangeAssertion ::= uid 'between'  dataExpression 'and' dataExpression

/*
    Substance
 */

substance ::= "substance" substanceRef "{"
    nameField
    typeField
    compartmentField
    subCompartmentField?
    referenceUnitField
    ( block_impacts | block_meta )*
    "}" {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiSubstance"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiSubstanceMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.substance.SubstanceStubElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.substance.SubstanceStub"
}

typeField ::= "type" '=' ("Emission"|"Resource"|"Land_use") {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.field.PsiSubstanceTypeField"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.field.PsiSubstanceTypeFieldMixin"
}

compartmentField ::= "compartment" "=" STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

subCompartmentField ::= "sub_compartment" "=" STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

block_meta ::= "meta" "{" meta_assignment* "}"

meta_assignment ::= STRING_LITERAL '=' STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiMetaAssignment"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiMetaAssignmentMixin"
}

/*
    Fields
 */

nameField ::= "name" "=" STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

dimField ::= "dimension" "=" STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

referenceUnitField ::= "reference_unit" "=" dataExpression

symbolField ::= "symbol" "=" STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.field.PsiStringLiteralField"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.field.PsiStringLiteralFieldMixin"
}

aliasForField ::= "alias_for" "=" dataExpression


/*
    Process
 */

process ::= "process" processRef
"{" (
    params
    | labels
    | variables
    | block_products
    | block_inputs
    | block_emissions
    | block_land_use
    | block_resources
    | block_meta
    | block_impacts
    )* "}" {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiProcess"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiProcessMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.process.ProcessStubElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.process.ProcessStub"
}

labels ::= "labels" "{" labelAssignment* "}"
labelAssignment ::= labelRef "=" STRING_LITERAL {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiLabelAssignment"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiLabelAssignmentMixin"
}

params ::= "params" "{" assignment* "}"

variables ::= "variables" "{" assignment* "}"

assignment ::= dataRef '=' dataExpression{
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiAssignment"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiAssignmentMixin"
}

/*
    Blocks
 */

block_products ::= "products" "{" technoProductExchange* "}"

block_inputs ::= "inputs" "{" technoInputExchange* "}"

block_emissions ::= "emissions" "{" bioExchange* "}"

block_land_use ::= "land_use" "{" bioExchange* "}"

block_resources ::= "resources" "{" bioExchange* "}"

block_impacts ::= "impacts" "{" impactExchange* "}"

/*
    Exchanges
 */

technoProductExchange ::= dataExpression outputProductSpec

technoInputExchange ::= terminalTechnoInputExchange
        | technoBlockForEach
terminalTechnoInputExchange ::= dataExpression inputProductSpec { pin=1 }
technoBlockForEach ::= 'for_each' dataRef 'from' dataSourceExpression '{' (variables | technoInputExchange)* '}' {
    pin=1
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiBlockForEach"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiBlockForEachMixin"
}

bioExchange ::= terminalBioExchange
        | bioBlockForEach
terminalBioExchange ::= dataExpression substanceSpec { pin=1 }
bioBlockForEach ::= 'for_each' dataRef 'from' dataSourceExpression '{' (variables | bioExchange)* '}' {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiBlockForEach"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiBlockForEachMixin"
}

impactExchange ::= terminalImpactExchange
        | impactBlockForEach
terminalImpactExchange ::= dataExpression indicatorRef { pin=1 }
impactBlockForEach ::= 'for_each' dataRef 'from' dataSourceExpression '{' (variables | impactExchange)* '}' {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiBlockForEach"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiBlockForEachMixin"
}

/*
    Quantity
    Use GrammarKit's expression-related syntax and rules to generate a Pratt parser.
 */

dataExpression ::= mulGroup
    | addGroup
    | exponentialQuantityExpression
    | baseGroup

private addGroup ::= addQuantityExpression | subQuantityExpression
private mulGroup ::= scaleQuantityExpression | mulQuantityExpression | divQuantityExpression
private baseGroup ::=  parenQuantityExpression
    | stringExpression
    | recordExpression
    | colExpression
    | sliceExpression
    | dataRef

fake binaryOperatorExpression ::= dataExpression dataExpression {
    extends=dataExpression
    methods=[
        left="/dataExpression[0]"
        right="/dataExpression[1]"
    ]
}

addQuantityExpression ::= dataExpression "+" dataExpression { extends=binaryOperatorExpression }
subQuantityExpression ::= dataExpression "-" dataExpression { extends=binaryOperatorExpression }
mulQuantityExpression ::= dataExpression "*" dataExpression { extends=binaryOperatorExpression }
divQuantityExpression ::= dataExpression "/" dataExpression { extends=binaryOperatorExpression }
exponentialQuantityExpression ::= dataExpression "^" NUMBER { extends=dataExpression methods=[exponent="NUMBER"] }
parenQuantityExpression ::= "(" dataExpression ")" { extends=dataExpression }
scaleQuantityExpression ::= NUMBER dataExpression { extends=dataExpression methods=[scale="NUMBER"]}
stringExpression ::= STRING_LITERAL { extends=dataExpression }
sliceExpression ::= dataRef  '.' columnRef  { pin=2 extends=dataExpression }
recordExpression ::= (opDefaultRecord | opLookup) dataSourceExpression { extends=dataExpression }
opDefaultRecord ::= 'default_record' 'from' { pin=1 }
opLookup ::= 'lookup'
colExpression ::= 'sum' '(' dataSourceExpression ',' columnRef ('*' columnRef)* ')' { pin=1 extends=dataExpression }

/*
    Data source expression
 */

dataSourceExpression ::= dataSourceRef rowFilter?
rowFilter ::= MATCH_KEYWORD rowSelector
        | MATCH_KEYWORD LPAREN ( rowSelector (COMMA rowSelector)* COMMA? ) RPAREN
rowSelector ::= columnRef EQUAL dataExpression { pin=1 }


/*
    Unit
 */
unitDefinition ::= "unit" dataRef "{" symbolField ( dimField | aliasForField) "}" {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.unit.PsiUnitDefinition"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.unit.PsiUnitDefinitionMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.unit.UnitElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.unit.UnitStub"
}

/*
    Reference
 */

labelRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiLabelRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiLabelRefMixin"
}

dataRef ::= uid {
    extends=dataExpression
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiDataRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiDataRefMixin"
}

productRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.trait.PsiUIDOwner"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiProductRefMixin"
}

processRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiProcessRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiProcessRefMixin"
}

substanceRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.trait.PsiUIDOwner"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiSubstanceRefMixin"
}

indicatorRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiIndicatorRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiIndicatorRefMixin"
}

parameterRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiParameterRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiParameterRefMixin"
}

testRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.trait.PsiUIDOwner"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiTestRefMixin"
}

dataSourceRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiDataSourceRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiDataSourceRefMixin"
}

columnRef ::= uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.ref.PsiColumnRef"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.ref.PsiColumnRefMixin"
}

/*
   Spec
 */

outputProductSpec ::= productRef allocateField? {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.spec.PsiOutputProductSpec"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.spec.PsiOutputProductSpecMixin"
    elementTypeClass="ch.kleis.lcaac.plugin.language.psi.stub.output_product.OutputProductElementType"
    stubClass = "ch.kleis.lcaac.plugin.language.psi.stub.output_product.OutputProductStub"
}
allocateField ::= "allocate" dataExpression

inputProductSpec ::= productRef processTemplateSpec? {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.spec.PsiInputProductSpec"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.spec.PsiInputProductSpecMixin"
}

processTemplateSpec ::= "from" processRef ("(" comma_sep_arguments? ")")? matchLabels? {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.spec.PsiProcessTemplateSpec"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.spec.PsiProcessTemplateSpecMixin"
}
matchLabels ::= "match" ( labelSelector | "(" comma_sep_label_selectors? ")")

private comma_sep_label_selectors ::= labelSelector ("," labelSelector)* ","?
labelSelector ::= labelRef "=" dataExpression { pin=1 }

private comma_sep_arguments ::= argument ("," argument)* ","?
argument ::= parameterRef "=" dataExpression { pin=1 }

substanceSpec ::= substanceRef ("(" compartmentField ("," subCompartmentField )? ")")? {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.spec.PsiSubstanceSpec"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.spec.PsiSubstanceSpecMixin"
}

/*
    Identifier
 */

urn ::= uid "." urn | uid {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiUrn"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiUrnMixin"
}

uid ::= IDENTIFIER {
    implements=["ch.kleis.lcaac.plugin.language.psi.type.PsiUID"]
    mixin="ch.kleis.lcaac.plugin.language.psi.mixin.PsiUIDMixin"
}

